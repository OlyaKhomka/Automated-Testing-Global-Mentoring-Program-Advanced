name: Playwright Tests
on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main
  schedule:
    - cron: '0 9 * * 1'  # every Monday at 09:00 UTC
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      - name: Send Slack notification (start)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"🚀 Test are launched!"}' $SLACK_WEBHOOK_URL

      # Step 1.1: Set up Java (SonarScanner нужен Java)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 1.2: Скачиваем SonarScanner CLI
      - name: Download SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      # Step 1.3: Запускаем анализ
      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_QUBE_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=OlyaKhomka_Automated-Testing-Global-Mentoring-Program-Advanced \
            -Dsonar.organization=olyakhomka \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run linting (Optional if you use ESLint or similar tools)
      - name: Run linting
        run: npm run eslint
      
      # Step 5: Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install

      # Step 6: Create .env file using GitHub secrets 
      - name: Create .env file from secrets
        run: |
          echo "USER_EMAIL=${{ secrets.USER_EMAIL }}" >> .env
          echo "USER_PASSWORD=${{ secrets.USER_PASSWORD }}" >> .env
          echo "BASE_URL_LOCAL=${{ secrets.BASE_URL_LOCAL }}" >> .env
          echo "BASE_URL_PROD=${{ secrets.BASE_URL_PROD }}" >> .env
          echo "DASHBOARD_NAME=${{ secrets.DASHBOARD_NAME }}" >> .env

      # Step 7: Run tests
      - name: Run tests in PROD. not headed
        run:  TEST_ENV=prod TEST_FRAMEWORK=playwright npx playwright test --project=chromium
      
      # Step 8:
      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report/
          
      # Step 9:
      - name: Upload JUnit test results
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: test-results/
      # Step 10:
      - name: Send Slack notification (finish)
        if: ${{ always() }}  # always send even if tests fail 
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          RESULT="Success"
          if [ ${{ job.status }} != "success" ]; then
            RESULT="Failure"
          fi
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"✅ Test finished: $RESULT\"}" $SLACK_WEBHOOK_URL
      # Step 10:
      - name: Install dependencies for Jira updater
        run: npm install xml2js axios
      # Step 10:
      - name: Run Jira Status Updater
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JUNIT_REPORT_PATH: './test-results/results.xml'
        run: node jira-status-updater.js